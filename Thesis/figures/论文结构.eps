%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 948.000000 296.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 948 296
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 948 296
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PingFangSC-Regular
%!FontType1-1.0: AAAAAB+PingFangHK-Regular 001.003%%CreationDate: 12/17/20% Copyright 2020 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAB+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /gid1246 putdup 2 /gid1251 putdup 3 /gid1256 putdup 4 /gid1323 putdup 5 /gid1325 putdup 6 /gid1330 putdup 7 /gid1393 putdup 8 /gid1605 putdup 9 /gid1683 putdup 10 /gid1747 putdup 11 /gid1750 putdup 12 /gid1760 putdup 13 /gid1815 putdup 14 /gid2213 putdup 15 /gid2291 putdup 16 /gid2330 putdup 17 /gid2688 putdup 18 /gid2900 putdup 19 /gid2933 putdup 20 /gid3006 putdup 21 /gid3035 putdup 22 /gid3182 putdup 23 /gid3548 putdup 24 /gid3669 putdup 25 /gid3682 putdup 26 /gid3932 putdup 27 /gid4137 putdup 28 /gid4696 putdup 29 /gid4913 putdup 30 /gid4945 putdup 31 /gid5261 putdup 32 /gid5291 putdup 33 /gid5486 putdup 34 /gid5507 putdup 35 /gid5686 putdup 36 /gid6558 putdup 37 /gid7112 putdup 38 /gid7499 putdup 39 /gid7561 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6B380B1FB6ACA202BC0F95707A429CC9AF6BE1E3551D3896BA53E6F8D62412C9494C1B7ADBF1E3530930E9147715A3E02BFE73E1C58A786564AB71650E24BE40D96D6401A51D6CB8C57B358DD3EF42A4F1FDF566CE2D95CBDEC19E9FD799BA4BDFAEDE838FE0FA2A9CA09CC50604181A7567DEAD005A449A508E4FF8BD62AE25DEA07D0E84B2211B38D3E63AE38B5A8F274F75022B1CB77E8471C31F509B7DC0F6D52B78F2CD1AB8B36342EFD397613184A3E3BDFA9BCCD30AC5C37B35026A3ADF8F21E041C933A94C5CF53A7AE7ACBBE5ED8059C773339E8C7EE6B78A0FB12D23566035195525AA4A4F1ED7455AB149447496760DA248460BC1674A354A2DBFE337FB9D3980EA959FF8CE0E7144CCDCDA366047CB410D234604F2FA5881C50CB9D0CA5A312D5FB08BD9EF99DA1568ECD230176B2616AB429563D621763CF839FD29DA84A4C75E3942784392AFC144C39AAB0DFB22ACAEDFD0753E161215D34B61FE1C6BF321498B04C6CE8AA2454E2F1A732598FD70CB66FEB42A6F0923755956914FD1919A0D5E6172E9FF96F015D0380E7F67D965152C9ADFF153C11B1015F10C9A0056D1CE4193AF15D242DF4DB7627B7910CD8A425FB7D63C831E2525ADA770A0CEE6C2EB74FCF0CBACB741B3C0B5B4B297F966D52E60CC03D6E76BBFABF0F60D91E1E6E683D2545B0E601449DAFD0EDBF4AB7E8D0FE9531FFFCD6EC0821F708183F48E9462077B2DD7817A78F2F309EFB9E432A4C327889DF78DB59CE1DC1145B2B19A1FF812EFDFEDF9626BD46D9A9A25A78C0C3EF1A621E0B57444F2A636E488EEF65FF6206E7DD1EF80C837EE253220A27970888084969FC7E386404C27A8721FBDD3BB58B4A9CA791791804B265F5A667F37F98E2CF01E66E587460E8C1552D13197AE355806D4B800F6E9DF6495E172311217944EE76AC284E20D356267EF323A347C07FB9073730936F3F31C2EFF4F9BC591D6BE105CC4645FEF6D7FAD200D1DB8B60070D9028541580E4D4AB3A91B2E1A5A133D336542C82AF3A3025954DE2C6AE6027D1CC032F6821C15786312C9E1A1BB72DA98E080D4A29C6EC16456241EDCBCBE506F17BD5838B5FBA482D3954FE51B73629CC1522BF7C3C81BDF557134A2ECE20080D5ABA9E3DB5819518EFED9A734A8B54835BC87557EE77172A7F00C9E40F11A1DC4FEFDC846CE066B0503270118531A1205A13F968C97634685FF40016A783A5E5B62D130801F34E16C4078B9C4FABB946516306E34A497F57E45AA7FC4391B299F70F4E085039AD317AF8B68C0B435EEDE29D15B7267B6D863136E47E8814206F80526AA1EB10575596756129C2DFDDEDDC264CE9AC5DF64A222056C051B63E4E232477530E229921D100AAA072A94CCC07B09530430A47C49C80C4925D2FFE18D0CAF4E72A7DB06905EF2EE4594E49D2907F6EE4623505CD4EF72C0445EB2CF44A8D58CB7332D73AA266DFFE37E8A3D3983CB41E84B002749CFAF7BFC0961936BCBD3EEC02EFEE7A447E66B811F82F08D7A40EACA7C017D27DE7401E734DC06979930291AF73FE040C575A6848E59AEB42D1ACE6E0F775D88AE31C84C1C4A32F014673D5F82C51EDD9BDD0590BCDC3107CD84BCA3CECF72D649260327A4A22B2B5009B0E407BEEFF771948141F202080C96A2DAD3398C6AB7E07E7FAB8FCE0C07E5F1D13BFACDA301C765097FACAD286E841736065AC04147A2EAB8DA49F8EF1DAB8190FEC966BE1FAB188A849868D0A44AD36AE361D3AF76BCF360D3444E24181A7628083C3667B4151DB9672338AB1CAB5908DB01BE3219A37FBA2A7BB7534DC1E3869A2F2D334B298AAAC5DE67E897D033E7D0867E447DEF9555B282ED1D75B411332FD6D6A09AFB416072AE6AD5C4856591322010950F09F9A374F674CA9B4B73E2F52BB27D54F11DD0666AAF36D88758B83C0A8331A5F1BD14D9F3F1476D81F40A31F92E795EDD1306E379A2C974150CC79B4CD1992B236B142C2430D58F0450C687F26C89A48BE87B37277F840CD8D4149FF627B63CBC6730EF3A80F86FE76DB912FE026D76D0425197E66025A41620F76BDCF8171C57A9F2E62A0F3590FF69AB3F4A93CDA35C7D5DA4C0D0299001C50949E43C39673AAE78B72AE3B0F3C8617EBC27B445D79D788D3A1DA9DAFD5D28BD5915E18F7CA53E8C6F40861B591A38A1742217D3FC3F8C0C94BC4A5899F87357DE95110AFB9D819636614083339433AA1E47A08C5A40B1880827E120BC795FE93F83C2083000B060AC0A565A90DBD8C415282F5D232216E74F99329A66F8324FE51950B3BE9FA299DE73C0D1C1D68570E900E3E0E1E3BD74DCA4B7A68FF4B85A63C8332AB4E67063212EEDC5373FEEF1A1351FF42B27EC1FE952B74041724A41D8A6F315CDCA21A97BD5277ED039451FEB3CC053C79971AEEBF5FF1A3F2B45945331C0DB069355142C6056A8AFD3FB790685722FDD77C10E02B8BA4F78A0C8B6A222544F7378531247A06EF833D91FC4705ECA2F6B9958D5D9BDEC008D83319E1714F2EB7369E3B45BDCC2D0055D14502F70826C421F916085E4C5C2DEBEF3758A2B5D81B7E3BDA4729DC45BA5457C0ABE8D136F49C7ABAD637558A652E677E5EB322D7BCF2C6F7CD1C3B4A38C7BE4D507339FC38C63E70EC8F2451B8AA25B890F747B307379CF1AAF337F58FB1158F1E9A1CCC304327645F7AD25A4423002BDCAB2DD66A236AAB74EEE4556B8A1790A1F98C4938FFE007322127AB5484055541C6C37D124481DF8E5CAFD7F4BA7031FF2F7105700FC890CF5E1F8188561AAC1966BCA3DA88874E73E27D65511F09CDA781FCB6F5D9AB07EC94B092A2ADFACF2887B67658D2FBEC0248FC6C2AF91CEC79399C1A417CE5CFB7E054E2DD16F7BFDEF41934EF1C004AA9552CDE547D4BCF1031487A6FA92A55D7ECC91E05EA721D8C0DC7CE7B2B3CE03566E2055856168CC077C6E51FFE84251F4AF5E92C35B234C02189A2DF09FF6D28AED935914E9FCC4235F2EF12298010C931CE7732A0DEE82AB1DA5D2D94AAB19D5D5A84C8D75492D9F19DE7DD7DEFE7FD7EBEC06939B9499B9A7196E0CAA7A755BBB6CB3A5DF6C596BA19CE29CBECDAD1EB17E711022C41FA5CE4EDAF62A97588BFA7031A0C9BD42E356034D3CED4BC82FC0FF5B5B68FF273C143A81FFEFA725879CCA59952182B715B652DFA60C2E1EE94B45F8FEC74F30B1726DA0A5559C2A5641D895DA8099E752B80BFCB594463B386A353419269317319C54BA6F446A8F275FFEB0D7E81A52ABF77B8CD4BA042E3DEC30399D7EFC88A93704DF4308D37A3678B57F6B8D2D2E84097CD4B8BF2F402B5EB0147FFCB2CC3083C4313350F39FFF6EFFBDEE2F2DD58098C765F28E8ABB159B51C92FB73577DB3BF1D9437B9EDBF05A54BBDBCB9B95E16FF881C6D86E98E4BD85CE0A34CFB97921A61092886A3544C60D8E922630D2A3108C3662299C97820934B5B94B59B8CD1E2AC634CD7438DE61ABCE27ED567C4FD1EE4966AE760E7E528278D903B146AF0CABC6C9F494C2C128C1E9391335B4F1682D29149E5374568350BB113DE66D625617FDA33A45CDAE51F98043BB69BD3F43E0B785DA18AF9B3DCA251C3DF17BD03A9EB8180744872AC46571F5A4B81963369003C59CE8937288DBC4F966E1D4051050192C24067BD0BC13A1CCD6E871388DA08AD6464B0C6AB72AEA4596208179EAEF46B2AEAB9E2AA6913C1C893005CA9A8C61FFD8506F0498BC02A0A9F4CFDAF859AF7C585D9DB523DC6FEEB0BBAC7A24A51EC31E745125E8569D2FF5AF0FD3D441418EAEB08DD89CDCAA92BA7FEDDA96805DB09D3528DDF05053FB965312E88449D9CB3039582912FB6598E5CC6C50749A44C1C53D81F847BFD6F4CD7FF1B3ED6B1A468A6A986B9900ADB25B2B4E83A5B3C7AF96D9D33E405F08CDB71042B76CCE5C234A6B2E9A5DC3DFED78B30DFD071C1E0D392C0CBB009DE1FD49C307D3B56A05920AD16ADBA0BC983ECBA20EE0B4FFC81EDF846A1E4D339DB6B8FE08B81425A7214168C37754C3C06DC9818796348AF72192A71E86AF61D2880F1439B7DE1CCB3505708EEDA3B067EE27066D46561595481007113E4406DF3263394ABBDCAAB9842B061C31989DA77449F0392D7DB8D2A9FEB20E32E3EBB78708509B8264C8B7646FDA1EF2560DA980B5E92538C8856293B92816E5BDFEA1B14B138C97D7B31641C280642CCDF9245EBC7BAED1E5DC660C48AC637E60B22E2C415AF2A1C9A42C511D2D8F6778C71AC2B9C50CD7CA0DD85BB36062DC2683BD50AEC4641A0B92DD4657C26A744CE92E67031B18FCC2D547D0FEB044A3E8E1AA3B8B8455AB47D57E4AAC89382FEAAFF7C17A142F4F57DFB9A6B8186F2BFC4FCD4317EEC1EFA3173971E99DD4C727FF20FDF4F9ED7FABFA345C06146867CF50C032E8A601E450CFAF26A1A513DC8758450A2DF6766874D37F22B119111725CB6F7CF75B84B75C6C3AB8210BF98D12A5902C04FD118F1C640704CDA41F7F9B8C8E67B9BF18C023B172C231DBC1735DBA10D61CBD31F1D1C67CB8734663378C41E64CDA88D79DE059E4DDFEDEDF1338410D5766B075615CA4B3FE151F5FE4E4463D53C14E6E3A8F7B31D18AED4E1006C73ABB4385B9AE16E4AD33AB188E5C124D1C3C51BC109B3243B5EFA4F76A0AD5DFDBA66CB417AADD143C0AA4FC9179A8CB94E4C37657BE9ABEADD9EBBB0C6E6E1B16486BD33F20F857F37441536ADF7BF541D9D2EFCA86D92500B892AE35E908E9DE79F4A420A1BE3DE8886892E207C4A8DF8E38ED47C6BEAD74CDDD54ADFA777122CA8DE27000CB54CD1648CFB24AB0FB4B6951EF42A813FF1068574D9BBB3483D0A5A38B3AC76B462F530CF096BBE97641328DF2DCFA393469D17EE9E25249CBA0F5A72B5F9CD477879CC6A107080C4DE8F93EF5EEA09E17E67455AF392B77302EC3C9E178EEB5B0C659BAA13B8D04B1D124605603FFD9A95CF107BC474AB8D7D53EFC1701ADDE16DBC2B74DA5E0735ECE9A16F2DE1AACD7186A1B8C838A7A803FA268BF320DC6964C6F9E32F8A4DE9F87186040039D559AA4C14790AD4E99F0F4163D94F509CC79963C0C06DD49898DB6DE1C2E3321D546DC62CE3C007CDD0BEC2812B64002AF43E0597D866CE435B316F890D42E69922A77274EB29295431FB945BDF87A971622A4AE64B899917C6DA05C44F668F070EA2CCC39C1B23A9377044A334FB66E23A3EC930A6A31013A21A4012FCF5E15DD09DE7C994F6C8D3236AE2BB578D76CE9384578E679A4C85AFE492C77F8E12AAAC8C0763CD8A888A508901AF99234353DE3AAFB952F02B636087BFD61E9265EDDAAC2911C6ACAD563FED3D878C1E449853FA9B6541F6F2AD4A0E28ACE5A9FF5A780D5BE0DD3E5EF1F2AC074E13F1134563D46ED870AEE27AA7C88C8F07EAE95A19BA06B421D0A9C8BAE0B677E1A3F44D4978189EC235C3934D7D95C97A17016234F4C0C7938BB9066E011E0F48322ACD0E928E001A3E9ADE698BFA0C97720E4BF1A9E0545DD376B53293FAD8790DCDF7FB526150AD3717D8F2652F49F026A8DC6198AF2C30EA8FED39E19663CB490ED321B3AE5BF32DA03E2277EAF660FCA4C21F3E6CA17EAA27BB1D2B887B684DDE5B499807057C8E996AC6444F893952FFDEB8D7B108A98A9460F6165A675FB6AB860440B214FB639A3392FD26A4373DF16CD37267B2CEF0B8831E122CF6E66146ACD9386A8465F87D9D68ACA44331673A76FA46BE4F8F544D62F4B0A7A2B4AA2A33C53AC86CB08D07292CCB6B693B9F8832BF5E48F0F278ED62C0F19D1F8D0BC31587EC9119121EB5FB0BC849968D9CAAC65B2A1DF3235F7E5E9ED1118C3DF3CC13B444CFEEC109FBBCDCC6A89F1E9D6AF32A120A9D0BEA65D1459EA2151E5AD5FEF30DE55A0907890C03575B93081E5921EE014CC020BD84A96913291FC158DA6F9B80765443357D4E464F6E616C7BAB2B7FB106C871CDDA55A52EFCFF6DAFB4A7C8A961DAE2A5C9DB69EDE19A0F81B1122E65AC617E4C6763956AD657EF2018C31BA9D83FF3EE8E58CE7AF35EBA8AEF597C57198163355F91E697EAA83B20AE02C66E146D21E0A9E53FDA2983EC67B365CAA3FBCFBDF615998B8ECFB35809A43BA4E056A9B786CC6B175E404595DDF6FD6FF444EF21C3742B89C2A757396B3165AF441EBC2A38960126640AE7C31D7407521C5CF71F0E51D2A54DF09DA60A4889EED14EC680DE1F53DF78EA90A04CA42E6FFE8B1F05E5D2466AF156625EFBCE4E3D7CFAFB82018F075938A93480C7B4A7D927B737AE6C39491C5609D89678741EF1BED4097F21674063BDA649B3322DF67D4E3117501D9C7EA82F00AA0938C851C8CBE9C25275076A550DF9D9B04E338C3CA9F6293A35C0D8BC4BA4FA98DBD87031ECA52252FFF2B3ACF0B14AE133367513F8814A31581B995E2073A2FCD8470465F69E0EBA2A1CED307F88B31F6EC58CA0BDBD63A11BBB34A2993AE49A4E6A7F5A62C7689744ABD155BC7878991759F4B7F31053E72B436471894A0C4DB09722E4A1EEE7F44DFA0177191E3C3EC8928360CD2C448E9DB21990B556D5A74F38EB4B14DCAEDE87B81BE78E1CEF8AD6A04CC17C90D8BE75009B1FD1B7B1FA20ED13BAF09EDD8B417F950DFE858FD4EBA4B213F7EA93020E19D0EE226A0ED11D1310DE024A45CD86C351E75613326987B038CE824E4D30A3D0567A3385F1F910A2813AD73072BBCFA690D14412E9B18B0F91E1BAA16112B8106ED85CDC8DBE743DA2C0E71311798400E917E5D4EBC496B9856D1308C1C960746A307E0E455963DA4363086F4C4E13CF1ED885F93D1916D9D6BC0B503341E1A7DE718E4B6EA585E45FE6CA3B1E36E5556D430C7D392424DD04758DB127693D42C57E115C925F2037DE6F59D0EFD61E1F1117FBC095C6336E30FA66E973D1497D1B3EFB4D49CADF9F9DA4B662B13060FAB0A652F5C90C00A979A82011334793A2DE0FFDE181980BED6828148B4C9391BCA55135590A7EAD8E4E9D8B2A1FB58968921DC6B9A8E654A93B6348F7FD166C7828E38A9371669839E8E90CCB89E9D58D8659518AC6C3E232B5851CE465D0938E9578A6F596789C24517B9AAF44B30048F758F0038E161965930AB66C18918320DC237501244432C2D7D087CC69C64BB84BCB28D61E0AB0C74DFFC3BC993A64054DE353F2D6AF5F8A03552B321564F7A30EDD4545383944E380BC2736B49BCB2EEA664CDBE7390904EB4C3C2879ACE511400EC359D970F045236CA876890BC0E1DE4D0A30BC8BFE3A4185B113EEE7AFE48F67B842064AEB94CE168C25319C66FE7FCA54FCA4F95880E22CD9DD036E88135005A32456CBB67F1C4AD5078B7C31BEF5D456D6F998A57470D885C1E45706D6B36F11FB4E8A8B043B495FD0834B56337886A24D7B833A2C6122C7A472C610CFAF2B1317EDB13EFE96E276F7FF862F126EE49439CC52C0915CB3DE169525BD90501C7B442977EDBF8524464832CF87B27425D36B4190EAB188E330A4BCC66CD5C1C11C55114CC63EB982EA9A94E8996C9A61CA025914E601F34141AADFAFAF3217D78DFFC26DCBDB7849C27108074989765DE7AC582FA93CA34425A18ABE7D23BA62C9029B035D1794D47142ABAD5FCAB9A0644BF0B72695FBAC4D6B22043E0792638CA4640E15F7E09C2A2A2E15AA17E210DB47CCB31DBF51F7CE6A9CED0FEC50FD9437DD0AFE28377ED0732CE516A9CF53A3FEE7CD03B191C45C9D293D97F71C7D9020CE8C78EC1CE5C72512D196F8D9BDCFEEBDA5D2C5CC37C7F06732BE7008A27CC41FA6895E432DA067995A5356D4290633E756AED494F56F9F2F5A3303F036754B71BDDFD599CD1EFA82523B70B921C7036E73C8B61842B32C8F7AC52F949602DB6C189DEBE8A17666C13D9971FB9D1F22AB667A1B5A2F054C7B2FD2FDB85FA54DBD9BB387A21037D924D55007F83608BECDFE5D9200148E3E83BC49A8AE37AFEFDB7FDEA17BEED92290E3A1D4F7C2300DE6EBCE545BAFA5EAEE848104B9A6024D2E5EA6233659CCB2CC9652C2C64C5CA83EA8A41724FBFB89B98BBCC68F110A8DBD4755F3F77B079F324F70608B3D0D591D11D35F3956C5C711AF6E3F380391BFCEEDDBC1233E716ADA18B270B43B2821CBDC08B27B8B37D846C1DF9E9A12B091C22217022671961303735FB86027C6EBC8FC3DCBC66FAB40C7BBC146730B7E2D8CEF565F956B9C952A21D643E3EB0EAA67C3B6A5DE28C3349BF420157D6F3A3A538F4B2777B0FA3B5558AED90B5D8B86F077E0B6B47BEB098A7D47AF352E4E341C8DF61CB30F6DDFE532FAE2926E82D70154D36441A06C1C0026BC28785D1D37A381B1EEEB7FF577F0EC56087250385DD6F0515F89320299D5E5B78347FC10F3193567DB784D8E635724A0E6DA1C624BF820B1D5045D82F4C2C91449DE243318938C1F7E90E1EA5F1A62536D624F1D3861D3B31246714A0F8ABEE07859D41BD5FC0E87AA2579083182A58969A63FE24EB04587575443AFF0F9E1FB3AE2BA55227A1FFD16CECE96A2CF8B9EC529A7352DE8425C30F876B6BC5B1C69AFC57573FC9156349654BA71D8833ECEEF4F92DB597F8AC28076F952AAE19B41E4372224CE90708B046DF87801EE72A04631D431672C8CDADA3E9B7901F0B8A32CCB4801553443B8C7F937857822F8251884A282732C32461D7519CA8E66B9002ADF05C8A70EF1208257DE52CAB6BE2422552353FC0E304D213CAE232AF01C12DFAF501B81E5E085F20BF88879DE9837D710A56F12237E1B834CFF95E10E94A33C2DA94730FE658D5C28485CAFAF1702C21A0386516F5FAA82411CF942BF30306B2247BD4EAA66C81A96CF23DD28AAF33968460D76596F199AE198E13733044A98494142046C10C5EB7A2DAE4758F65954AA7F83344AF9B9DEEB0F355BE0F021FEB69DC62F7E21CD1C0E87D3FA18647EEBB0B0B1422051F77E4FCB892F4987D59BC1870CAC0EEC2087947F44126F01C59FF6A338FC80C41E8201228B433590C66A6670345B2108CE10CCBFA1B03A1F8B98D8A17D3F32518EC7092694E7F73264056D7228B2471BA2CCF779BB268F5692206BD6960AC8FDE2C38B61EA9E01BA8FAAF0D4C965099BC815F1E3CBA5AABE4584D2D55C6D23162455C79813E8E65525BE6549783A86FAA1DF467B0CCEA363D4EEA36B9186F13814EC61FC0827212390EACC3FF24723BAB90F214DBE950D1A737251ED7F3A0CB8868852C54498A1DB7E978A83ACAEA712FF67A1F364F4FFCB3D2D6AEB98CDF82FA5F178A2DF7EB1F7C249D024315F0739945EE6CDC2DEF5BCEB2DB334DFB5B5D656FF1677759945971347C48B2C040B94A817A9816B64D98A5D06873FA1A9D01C1A4A486462D840953EB21F49A9D143124560DD378040172BB28C9D31F50F77C582D2C2704830EADD94B3EFC65161CB42D07EEC17955EDE53044811E6ABD83E3E8EF291D73AEF060F96EC1624413090C2B7AE8C8BD69287258F5EF152E86EEAFBA82B2789FBC7C78174DC1A56F3F9C056258D4EB7DF75207624B068FDE69C11AA40B403E097943AEA5E422BE8FA1E7A2790FA5A76C07716719B3710A7169BA0C76C81F9FBE08DAB5CDA57A83D54565CC716205A2D345BEA7E614ADCF0501EDDBBD25936AF9E0A89BD9EB36AB1B9748AD81B0525C2D961B9D442E334FA51952FD52A0435078EBC0100C0B77AB34140F2BAC1C7FCC3A095D62F9937BC9004D57159E00EB269B154731415FF5A4B0A54A7F32DC40201962BE61C586E7C4008643895ADFAFB4FFCC6AB83E42D021DE54881A73836E6207CAABEEF474AB8E579C039EBAC9B7EC71F1AF8D0E2166C09A5CAEA7C1DA31484940FD850438335D954E251EC254F8E082FDA870ECC71CC22DA6753095D862064256292409435CABB1ED18E79BF356EAA3307A1571E824CE378AB7030F4B81DFD8965DCFD7CE2D5B23E687846F6CD9EAAA985FA4B88AD600E84FC8C456451728AAA18417469FB6D73C9BA65B52F2FDABD8D3198A76852C66E324750F3CD09D12FF8089501FA68A60B7D191AA8FA27AFC85A2591CB026149AB304B135F0ED68F211CC3FEE57B6B590102824EC1348F82EC6DCE6CB8E5B9D6BEE3F31B9CD76CF60E0736B33D023EFEA474B70D54C109C96F475D7326BFE75B28493832730787C9DC58EEEFDB8E18111721CCA7F262930B51C3CE88719CBBFE257912AD82FDD5E942AA8390341ABBFD0FA91FDD1DAC45F92D194E89E2A42777156A7D137A45B6E757C05E2A1419A29FEBA28FB1296C8F1185D0DD3B1B052BC4B53A0D66CF7ABFD8D09602542A33985FF82E164463F950A36EA2A69BE33B3B2F3949D19EB991CDAF69092019617A83E3E79ED3780050E07F40DE2077CB1E19EB1222E7256009282ED9611660CF40FE8AE2EB007C086529BBA998E2B7548F200B2A523F8E9234CE6B734656D7FA021CF75658B584B5DB8D5AA840D1495BC83D7F867ED18C5158DEA8CBD06C17466C11E8D80C34AD5D52997550ED2BA064D7A36F228640E4F94B489933CF8BA5B1C5034C604D247E523532E2C6A23B5EE2F8CFBDEB0E1B06A74FBD51267690981A0F8B559D749BC0A99C2861ACA2092D28681B2C0E86AF22CCE3CC5330A3632B757DF2542E4C160E2382799F62A9A8FF8A68F17E87004095F7585D0D21EF34E6BA6458E3D9A79FF8687F84976AA8227F64B57A5BC8D3CC7C6CB197B427F33600895C0D256774667AD755FBDB74A75B29540C67731CBC35C05CE9CD383633E6DD335B6B1F7997712995430D858915C6D0F8A1E3E509A9B5F02E7FDE57C7A0FD72CDE188326EF8F47BEC5E3E1CBDDBD0AFCA32578B2D3046FD5AC21177EEC017B20FFC5DFD3F37E4A25036583E1182262E40B45F585DEF3503F37E936EAF9B6A78EDD9A6D061A26BBEEF4D45A7DBAA1D086FCB4BE6D4F5C144A07D6592277C53918F1B328956DA51919293D93E1D39935ABE4CDB19B18E5477286EB7914B7BFCAA1467C518E935153EAAE4FF732A2346407A90670FDE55D3E2413EA384244E8B4F0C7A477E8DC95AA9D8E9477D64CD1E4F17BDC45FCF533462557D90CE04ED30B4E250179CC13CA5A9964193FB356FABA95D5669ED03C7DE73C7C74C0A3A7906250389085CCB9A5A7B80085F53BE80A547C23E4E06D65E92909D70F4CF4A0CB9E992C5A7ADB465BD67A0C45A81A8C30F3F74207B3ACA7D6A24043B7103CBF7220AA9C7B1BE307C2FA834F35184EC70A96704C8563DEDE422F9F651CA19CB98B0C9B430D99A9AC85FA5AB91540FF324D93D33F798A8F388807115D3B81113885B62AE85F0C8C32A02CB2E0C3770D0E3EBCA6A5519E8DFBD9CE328AD81BFB68165CEBBA6A616966A2083929CAE2D49E1C502E4D93B58B14134ABD9F20ACB69B700AA6990F786E0B9E227BA37B3CA8233A1216968571A79FD35F53815EDD2FD1976F001350511317F1CF35A850026099CB8575A1699BADE38E98417C5D2D613D2F7015119CC30A68A401F552088A350FE2321FE824B0F3ADEB3A8B8E2146AA6309F074470F6CD472D5D5038ECAA39ADFC8B5058A0190982BE92C63EF7E924227EAAF1C529047D00FACBFC8649461FAB04E1853E2392347C43210CB0B0A4FA3E9A4FCC0A121414BB4328C62FCBEA077646BE54456B319A2DC1F0282F75DFAC977B639C496BCC8580E6029201D6F38754F435DDA3258FD0285AB6767B65A3219986A3E30716F682E060249F15DCD48265745713745ADDFF7789B05D37736506A2ED9866269A6E9BDD9E2F4A1D938B4E1DF0FF6923A3AF04CC850619378CC8AA47C0815E6C608A49DA1D893B78250712B26EA6FF9C85B79687FFE2CC4BB682654CB1D4E97697E7A04866A6C5DBDF0B80B763A5C511D43C2301724493350028443C6EA3A6B652D19D0002788F6FC5535E54CAF605CF9A15FEE65C42763B0B41B6F8F33CFC746747A599C1838932404EAFB35AEF84AFA0331D7A88E7C5B4E05F3B72471671A71EFD861ED9F5019E8DEF3E63575FC5772CEE812D0A78A249D449FBBC0982B0172A3F2D824BD5BE45B304FBE5BBEB32185509C8C0DA987B423FFCF5284AE0701F35E023F1B8496D03FAF059D08E5F60C2D68C76CB5CD042F60912D8B370E2422232B1A252FD1C8EEC0B25E02EA3C0802590ACC86EDAF826CB6D0D0AA15487D6401074E10B7E66F69A6EB01863DC416BA11BDDB0757FF26ECA590F32B291A6FE750FA962B2A8EB2390C29BA44196F05C1776579BBF0D2AF750C508A7D810B5D07967CD101D6CB62AC3CBA5C05A083D6C02450A14B7C8106E09E2AD0535396FC2721658A3E6617C0ACD850A80D80E2CC6F4E1E9264C993A4E412B0453FFC5A2DA2F13D46D2CC7B02364BA33EE1C36F53B09C37C5801DE1BD9310574923067168E23BA2ED53DAB585AC09A06BDBBD4293D4285319C052EBEF99D3EC81E1D1911F204A521DF0B2D09689CE97FAB16360D02CD4C0DF5D9499D28AF87DDC4ED253B55CA8AD7DC05500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /gid5291 putdup 34 /gid1246 putdup 35 /gid5261 putdup 36 /gid5507 putdup 37 /gid6558 putdup 38 /gid1323 putdup 39 /gid1393 putdup 40 /gid1747 putdup 41 /gid1683 putdup 42 /gid7112 putdup 43 /gid3932 putdup 44 /gid2291 putdup 45 /gid1251 putdup 46 /gid2330 putdup 47 /gid1325 putdup 48 /gid1760 putdup 49 /gid1815 putdup 50 /gid2900 putdup 51 /gid4696 putdup 52 /gid4913 putdup 53 /gid3548 putdup 54 /gid4137 putdup 55 /gid2213 putdup 56 /gid5686 putdup 57 /gid4945 putdup 58 /gid2933 putdup 59 /gid3182 putdup 60 /gid1330 putdup 61 /gid7499 putdup 62 /gid3682 putdup 63 /gid1750 putdup 64 /gid3006 putdup 65 /gid1605 putdup 66 /gid3035 putdup 67 /gid5486 putdup 68 /gid1256 putdup 69 /gid2688 putdup 70 /gid3669 putdup 71 /gid7561 putreadonly def/$SubFontArray [/AAAAAB+PingFangHK-Regular findfont ] def/CharProcs 41 dictdup /gid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /gid1246 {(\001) 0 $SP} putdup /gid1251 {(\002) 0 $SP} putdup /gid1256 {(\003) 0 $SP} putdup /gid1323 {(\004) 0 $SP} putdup /gid1325 {(\005) 0 $SP} putdup /gid1330 {(\006) 0 $SP} putdup /gid1393 {(\007) 0 $SP} putdup /gid1605 {(\010) 0 $SP} putdup /gid1683 {(\011) 0 $SP} putdup /gid1747 {(\012) 0 $SP} putdup /gid1750 {(\013) 0 $SP} putdup /gid1760 {(\014) 0 $SP} putdup /gid1815 {(\015) 0 $SP} putdup /gid2213 {(\016) 0 $SP} putdup /gid2291 {(\017) 0 $SP} putdup /gid2330 {(\020) 0 $SP} putdup /gid2688 {(\021) 0 $SP} putdup /gid2900 {(\022) 0 $SP} putdup /gid2933 {(\023) 0 $SP} putdup /gid3006 {(\024) 0 $SP} putdup /gid3035 {(\025) 0 $SP} putdup /gid3182 {(\026) 0 $SP} putdup /gid3548 {(\027) 0 $SP} putdup /gid3669 {(\030) 0 $SP} putdup /gid3682 {(\031) 0 $SP} putdup /gid3932 {(\032) 0 $SP} putdup /gid4137 {(\033) 0 $SP} putdup /gid4696 {(\034) 0 $SP} putdup /gid4913 {(\035) 0 $SP} putdup /gid4945 {(\036) 0 $SP} putdup /gid5261 {(\037) 0 $SP} putdup /gid5291 {( ) 0 $SP} putdup /gid5486 {(!) 0 $SP} putdup /gid5507 {(") 0 $SP} putdup /gid5686 {(#) 0 $SP} putdup /gid6558 {($) 0 $SP} putdup /gid7112 {(%) 0 $SP} putdup /gid7499 {(&) 0 $SP} putdup /gid7561 {(') 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PingFangSC-Regular cguidfix
/F1.1/PingFangSC-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 948 296 rc
0 296 m
948 296 l
948 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1172.6666 1214 m
2322 1214 l
2322 -1476.6666 l
-1172.6666 -1476.6666 l
h
-1172.6666 1214 m
f
1 156 m
132 156 l
132 82 l
1 82 l
h
1 156 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
127 262 m
258 262 l
258 336 l
127 336 l
h
127 262 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
168.5 294 m
(!"#)[ 16.000000 16.000000 0.000000 ] xS
176.5 316 m
($%)[ 16.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
179 156 m
310 156 l
310 82 l
179 82 l
h
179 156 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
305 262 m
436 262 l
436 336 l
305 336 l
h
305 262 m
S
/Cs1 SC
0 sc
0 i
346.5 294 m
(!&#)[ 16.000000 16.000000 0.000000 ] xS
322.5 316 m
('\(\)*+,)[ 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
563 295 m
739 295 l
739 221 l
563 221 l
h
563 295 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
689 123 m
865 123 l
865 197 l
689 197 l
h
689 123 m
S
/Cs1 SC
0 sc
0 i
753 144 m
(!-#)[ 16.000000 16.000000 0.000000 ] xS
697 166 m
(./0123%4'\()[ 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
745 188 m
(\)*56)[ 16.000000 16.000000 16.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
563 182 m
739 182 l
739 108 l
563 108 l
h
563 182 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
689 236 m
865 236 l
865 310 l
689 310 l
h
689 236 m
S
/Cs1 SC
0 sc
0 i
753 257 m
(!7#)[ 16.000000 16.000000 0.000000 ] xS
697 279 m
(./89:;123%)[ 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
721 301 m
(4'\(\)*56)[ 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
563 75 m
739 75 l
739 1 l
563 1 l
h
563 75 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
689 343 m
865 343 l
865 417 l
689 417 l
h
689 343 m
S
/Cs1 SC
0 sc
0 i
753 364 m
(!<#)[ 16.000000 16.000000 0.000000 ] xS
697 386 m
(./=>123%4?)[ 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
721 408 m
(@'\(\)*56)[ 16.000000 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
258 299 m
295.10001 299 l
S
0 i
CM
177.10001 119 m
169.10001 122 l
169.10001 116 l
h
177.10001 119 m
f
0 J
0 j
1 0 0 -1 -126 418 cm
303.10001 299 m
295.10001 296 l
295.10001 302 l
h
303.10001 299 m
S
/Cs2 SC
1 1 1 sc
CM
816.5 182 m
947.5 182 l
947.5 108 l
816.5 108 l
h
816.5 182 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
942.5 236 m
1073.5 236 l
1073.5 310 l
942.5 310 l
h
942.5 236 m
S
/Cs1 SC
0 sc
0 i
984 268 m
(!A#)[ 16.000000 16.000000 0.000000 ] xS
968 290 m
(BCDEF)[ 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
865 160 m
875 160 l
903.5 160.5 l
903 269.66666 l
903 273 l
942.5 273 l
S
865 380 m
903.25 380 l
903.25 377.25 l
903 279.66666 l
903 269.66666 l
S
/Cs3 SC
0 0 0 sc
865 273 m
932.59998 273 l
S
0 i
CM
814.59998 145 m
806.59998 148 l
806.59998 142 l
h
814.59998 145 m
f
0 J
0 j
1 0 0 -1 -126 418 cm
940.59998 273 m
932.59998 270 l
932.59998 276 l
h
940.59998 273 m
S
/Cs2 SC
1 1 1 sc
CM
375 237 m
506 237 l
506 163 l
375 163 l
h
375 237 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
501 181 m
632 181 l
632 255 l
501 255 l
h
501 181 m
S
/Cs1 SC
0 sc
0 i
518.5 224 m
(G@'\(\)*)[ 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
375 75 m
506 75 l
506 1 l
375 1 l
h
375 75 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -126 418 cm
501 343 m
632 343 l
632 417 l
501 417 l
h
501 343 m
S
/Cs1 SC
0 sc
0 i
518.5 386 m
(?@'\(\)*)[ 16.000000 16.000000 16.000000 16.000000 16.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
632 380 m
679.09998 380 l
S
0 i
CM
561.09998 38 m
553.09998 41 l
553.09998 35 l
h
561.09998 38 m
f
0 J
0 j
1 0 0 -1 -126 418 cm
687.09998 380 m
679.09998 377 l
679.09998 383 l
h
687.09998 380 m
S
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
468.5 299 m
468.5 218 l
491.10001 218 l
S
0 i
CM
373.10001 200 m
365.10001 203 l
365.10001 197 l
h
373.10001 200 m
f
0 J
0 j
1 0 0 -1 -126 418 cm
499.10001 218 m
491.10001 215 l
491.10001 221 l
h
499.10001 218 m
S
1 J
1 j
0.60000002 i
436 299 m
468.5 299 l
468.5 380 l
491.10001 380 l
S
0 i
CM
373.10001 38 m
365.10001 41 l
365.10001 35 l
h
373.10001 38 m
f
0 J
0 j
1 0 0 -1 -126 418 cm
499.10001 380 m
491.10001 377 l
491.10001 383 l
h
499.10001 380 m
S
1 J
1 j
0.60000002 i
660.5 218 m
660.5 160 l
679.09998 160 l
S
0 i
CM
561.09998 258 m
553.09998 261 l
553.09998 255 l
h
561.09998 258 m
f
0 J
0 j
1 0 0 -1 -126 418 cm
687.09998 160 m
679.09998 157 l
679.09998 163 l
h
687.09998 160 m
S
1 J
1 j
0.60000002 i
632 218 m
660.5 218 l
660.5 273 l
679.09998 273 l
S
0 i
CM
561.09998 145 m
553.09998 148 l
553.09998 142 l
h
561.09998 145 m
f
0 J
0 j
1 0 0 -1 -126 418 cm
687.09998 273 m
679.09998 270 l
679.09998 276 l
h
687.09998 273 m
S
ep
end
%%Trailer
%%EOF
